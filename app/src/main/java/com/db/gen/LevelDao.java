package com.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.datas.Level;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LEVEL".
*/
public class LevelDao extends AbstractDao<Level, Long> {

    public static final String TABLENAME = "LEVEL";

    /**
     * Properties of entity Level.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LevelId = new Property(1, int.class, "levelId", false, "LEVEL_ID");
        public final static Property IsDefault = new Property(2, int.class, "isDefault", false, "IS_DEFAULT");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
        public final static Property MovieId = new Property(5, int.class, "movieId", false, "MOVIE_ID");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Cid = new Property(7, String.class, "cid", false, "CID");
        public final static Property MovieName = new Property(8, String.class, "movieName", false, "MOVIE_NAME");
    }


    public LevelDao(DaoConfig config) {
        super(config);
    }
    
    public LevelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LEVEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LEVEL_ID\" INTEGER NOT NULL ," + // 1: levelId
                "\"IS_DEFAULT\" INTEGER NOT NULL ," + // 2: isDefault
                "\"PRICE\" INTEGER NOT NULL ," + // 3: price
                "\"STATUS\" INTEGER NOT NULL ," + // 4: status
                "\"MOVIE_ID\" INTEGER NOT NULL ," + // 5: movieId
                "\"NAME\" TEXT," + // 6: name
                "\"CID\" TEXT," + // 7: cid
                "\"MOVIE_NAME\" TEXT);"); // 8: movieName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LEVEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Level entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLevelId());
        stmt.bindLong(3, entity.getIsDefault());
        stmt.bindLong(4, entity.getPrice());
        stmt.bindLong(5, entity.getStatus());
        stmt.bindLong(6, entity.getMovieId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(8, cid);
        }
 
        String movieName = entity.getMovieName();
        if (movieName != null) {
            stmt.bindString(9, movieName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Level entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLevelId());
        stmt.bindLong(3, entity.getIsDefault());
        stmt.bindLong(4, entity.getPrice());
        stmt.bindLong(5, entity.getStatus());
        stmt.bindLong(6, entity.getMovieId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(8, cid);
        }
 
        String movieName = entity.getMovieName();
        if (movieName != null) {
            stmt.bindString(9, movieName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Level readEntity(Cursor cursor, int offset) {
        Level entity = new Level( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // levelId
            cursor.getInt(offset + 2), // isDefault
            cursor.getInt(offset + 3), // price
            cursor.getInt(offset + 4), // status
            cursor.getInt(offset + 5), // movieId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // movieName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Level entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLevelId(cursor.getInt(offset + 1));
        entity.setIsDefault(cursor.getInt(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
        entity.setMovieId(cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMovieName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Level entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Level entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Level entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
