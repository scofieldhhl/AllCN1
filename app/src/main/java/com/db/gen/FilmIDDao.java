package com.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.datas.FilmID;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILM_ID".
*/
public class FilmIDDao extends AbstractDao<FilmID, Long> {

    public static final String TABLENAME = "FILM_ID";

    /**
     * Properties of entity FilmID.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Cid = new Property(2, String.class, "cid", false, "CID");
        public final static Property MovieId = new Property(3, int.class, "movieId", false, "MOVIE_ID");
        public final static Property FilmId = new Property(4, String.class, "filmId", false, "FILM_ID");
        public final static Property Pos = new Property(5, int.class, "pos", false, "POS");
    }


    public FilmIDDao(DaoConfig config) {
        super(config);
    }
    
    public FilmIDDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILM_ID\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CID\" TEXT," + // 2: cid
                "\"MOVIE_ID\" INTEGER NOT NULL ," + // 3: movieId
                "\"FILM_ID\" TEXT," + // 4: filmId
                "\"POS\" INTEGER NOT NULL );"); // 5: pos
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_FILM_ID_NAME_CID_MOVIE_ID_FILM_ID_POS ON \"FILM_ID\"" +
                " (\"NAME\" ASC,\"CID\" ASC,\"MOVIE_ID\" ASC,\"FILM_ID\" ASC,\"POS\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILM_ID\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FilmID entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(3, cid);
        }
        stmt.bindLong(4, entity.getMovieId());
 
        String filmId = entity.getFilmId();
        if (filmId != null) {
            stmt.bindString(5, filmId);
        }
        stmt.bindLong(6, entity.getPos());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FilmID entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(3, cid);
        }
        stmt.bindLong(4, entity.getMovieId());
 
        String filmId = entity.getFilmId();
        if (filmId != null) {
            stmt.bindString(5, filmId);
        }
        stmt.bindLong(6, entity.getPos());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FilmID readEntity(Cursor cursor, int offset) {
        FilmID entity = new FilmID( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cid
            cursor.getInt(offset + 3), // movieId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // filmId
            cursor.getInt(offset + 5) // pos
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FilmID entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMovieId(cursor.getInt(offset + 3));
        entity.setFilmId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPos(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FilmID entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FilmID entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FilmID entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
