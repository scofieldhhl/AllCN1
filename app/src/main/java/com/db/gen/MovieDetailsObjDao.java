package com.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.datas.MovieDetailsObj;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE_DETAILS_OBJ".
*/
public class MovieDetailsObjDao extends AbstractDao<MovieDetailsObj, Long> {

    public static final String TABLENAME = "MOVIE_DETAILS_OBJ";

    /**
     * Properties of entity MovieDetailsObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Bought = new Property(1, boolean.class, "bought", false, "BOUGHT");
        public final static Property Cid = new Property(2, String.class, "cid", false, "CID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property ImgUrl = new Property(4, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Casts = new Property(5, String.class, "casts", false, "CASTS");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
        public final static Property Countries = new Property(7, String.class, "countries", false, "COUNTRIES");
        public final static Property Directors = new Property(8, String.class, "directors", false, "DIRECTORS");
        public final static Property Summary = new Property(9, String.class, "summary", false, "SUMMARY");
        public final static Property Year = new Property(10, String.class, "year", false, "YEAR");
        public final static Property Rate = new Property(11, String.class, "rate", false, "RATE");
        public final static Property Label = new Property(12, String.class, "label", false, "LABEL");
        public final static Property Duration = new Property(13, String.class, "duration", false, "DURATION");
        public final static Property MovieId = new Property(14, int.class, "movieId", false, "MOVIE_ID");
        public final static Property FilmIdNum = new Property(15, int.class, "filmIdNum", false, "FILM_ID_NUM");
        public final static Property FilmIdPageNum = new Property(16, int.class, "filmIdPageNum", false, "FILM_ID_PAGE_NUM");
    }


    public MovieDetailsObjDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDetailsObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE_DETAILS_OBJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOUGHT\" INTEGER NOT NULL ," + // 1: bought
                "\"CID\" TEXT," + // 2: cid
                "\"NAME\" TEXT," + // 3: name
                "\"IMG_URL\" TEXT," + // 4: imgUrl
                "\"CASTS\" TEXT," + // 5: casts
                "\"CATEGORY\" TEXT," + // 6: category
                "\"COUNTRIES\" TEXT," + // 7: countries
                "\"DIRECTORS\" TEXT," + // 8: directors
                "\"SUMMARY\" TEXT," + // 9: summary
                "\"YEAR\" TEXT," + // 10: year
                "\"RATE\" TEXT," + // 11: rate
                "\"LABEL\" TEXT," + // 12: label
                "\"DURATION\" TEXT," + // 13: duration
                "\"MOVIE_ID\" INTEGER NOT NULL ," + // 14: movieId
                "\"FILM_ID_NUM\" INTEGER NOT NULL ," + // 15: filmIdNum
                "\"FILM_ID_PAGE_NUM\" INTEGER NOT NULL );"); // 16: filmIdPageNum
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MOVIE_DETAILS_OBJ_CID_MOVIE_ID_NAME ON \"MOVIE_DETAILS_OBJ\"" +
                " (\"CID\" ASC,\"MOVIE_ID\" ASC,\"NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE_DETAILS_OBJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MovieDetailsObj entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBought() ? 1L: 0L);
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(3, cid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(6, casts);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
 
        String countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(8, countries);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(9, directors);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(11, year);
        }
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(12, rate);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(13, label);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(14, duration);
        }
        stmt.bindLong(15, entity.getMovieId());
        stmt.bindLong(16, entity.getFilmIdNum());
        stmt.bindLong(17, entity.getFilmIdPageNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MovieDetailsObj entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getBought() ? 1L: 0L);
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(3, cid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(5, imgUrl);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(6, casts);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
 
        String countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(8, countries);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(9, directors);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(10, summary);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(11, year);
        }
 
        String rate = entity.getRate();
        if (rate != null) {
            stmt.bindString(12, rate);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(13, label);
        }
 
        String duration = entity.getDuration();
        if (duration != null) {
            stmt.bindString(14, duration);
        }
        stmt.bindLong(15, entity.getMovieId());
        stmt.bindLong(16, entity.getFilmIdNum());
        stmt.bindLong(17, entity.getFilmIdPageNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MovieDetailsObj readEntity(Cursor cursor, int offset) {
        MovieDetailsObj entity = new MovieDetailsObj( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // bought
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // casts
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // category
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // countries
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // directors
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // summary
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // year
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // rate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // label
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // duration
            cursor.getInt(offset + 14), // movieId
            cursor.getInt(offset + 15), // filmIdNum
            cursor.getInt(offset + 16) // filmIdPageNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MovieDetailsObj entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBought(cursor.getShort(offset + 1) != 0);
        entity.setCid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCasts(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCountries(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDirectors(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSummary(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setYear(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLabel(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDuration(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMovieId(cursor.getInt(offset + 14));
        entity.setFilmIdNum(cursor.getInt(offset + 15));
        entity.setFilmIdPageNum(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MovieDetailsObj entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MovieDetailsObj entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MovieDetailsObj entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
