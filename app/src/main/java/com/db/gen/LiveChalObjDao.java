package com.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.datas.LiveChalObj;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE_CHAL_OBJ".
*/
public class LiveChalObjDao extends AbstractDao<LiveChalObj, Long> {

    public static final String TABLENAME = "LIVE_CHAL_OBJ";

    /**
     * Properties of entity LiveChalObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property KeyL = new Property(0, Long.class, "keyL", true, "_id");
        public final static Property ListPos = new Property(1, int.class, "listPos", false, "LIST_POS");
        public final static Property PType = new Property(2, int.class, "pType", false, "P_TYPE");
        public final static Property UiPos = new Property(3, String.class, "uiPos", false, "UI_POS");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property FilmId = new Property(5, String.class, "filmId", false, "FILM_ID");
        public final static Property VodId = new Property(6, String.class, "vodId", false, "VOD_ID");
        public final static Property ColName = new Property(7, String.class, "colName", false, "COL_NAME");
        public final static Property ColId = new Property(8, String.class, "colId", false, "COL_ID");
        public final static Property IsFav = new Property(9, boolean.class, "isFav", false, "IS_FAV");
    }


    public LiveChalObjDao(DaoConfig config) {
        super(config);
    }
    
    public LiveChalObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE_CHAL_OBJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: keyL
                "\"LIST_POS\" INTEGER NOT NULL ," + // 1: listPos
                "\"P_TYPE\" INTEGER NOT NULL ," + // 2: pType
                "\"UI_POS\" TEXT," + // 3: uiPos
                "\"NAME\" TEXT NOT NULL ," + // 4: name
                "\"FILM_ID\" TEXT NOT NULL ," + // 5: filmId
                "\"VOD_ID\" TEXT NOT NULL ," + // 6: vodId
                "\"COL_NAME\" TEXT NOT NULL ," + // 7: colName
                "\"COL_ID\" TEXT NOT NULL ," + // 8: colId
                "\"IS_FAV\" INTEGER NOT NULL );"); // 9: isFav
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_LIVE_CHAL_OBJ_NAME_VOD_ID_COL_NAME_COL_ID ON \"LIVE_CHAL_OBJ\"" +
                " (\"NAME\" ASC,\"VOD_ID\" ASC,\"COL_NAME\" ASC,\"COL_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE_CHAL_OBJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LiveChalObj entity) {
        stmt.clearBindings();
 
        Long keyL = entity.getKeyL();
        if (keyL != null) {
            stmt.bindLong(1, keyL);
        }
        stmt.bindLong(2, entity.getListPos());
        stmt.bindLong(3, entity.getPType());
 
        String uiPos = entity.getUiPos();
        if (uiPos != null) {
            stmt.bindString(4, uiPos);
        }
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getFilmId());
        stmt.bindString(7, entity.getVodId());
        stmt.bindString(8, entity.getColName());
        stmt.bindString(9, entity.getColId());
        stmt.bindLong(10, entity.getIsFav() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LiveChalObj entity) {
        stmt.clearBindings();
 
        Long keyL = entity.getKeyL();
        if (keyL != null) {
            stmt.bindLong(1, keyL);
        }
        stmt.bindLong(2, entity.getListPos());
        stmt.bindLong(3, entity.getPType());
 
        String uiPos = entity.getUiPos();
        if (uiPos != null) {
            stmt.bindString(4, uiPos);
        }
        stmt.bindString(5, entity.getName());
        stmt.bindString(6, entity.getFilmId());
        stmt.bindString(7, entity.getVodId());
        stmt.bindString(8, entity.getColName());
        stmt.bindString(9, entity.getColId());
        stmt.bindLong(10, entity.getIsFav() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LiveChalObj readEntity(Cursor cursor, int offset) {
        LiveChalObj entity = new LiveChalObj( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // keyL
            cursor.getInt(offset + 1), // listPos
            cursor.getInt(offset + 2), // pType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // uiPos
            cursor.getString(offset + 4), // name
            cursor.getString(offset + 5), // filmId
            cursor.getString(offset + 6), // vodId
            cursor.getString(offset + 7), // colName
            cursor.getString(offset + 8), // colId
            cursor.getShort(offset + 9) != 0 // isFav
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LiveChalObj entity, int offset) {
        entity.setKeyL(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setListPos(cursor.getInt(offset + 1));
        entity.setPType(cursor.getInt(offset + 2));
        entity.setUiPos(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.getString(offset + 4));
        entity.setFilmId(cursor.getString(offset + 5));
        entity.setVodId(cursor.getString(offset + 6));
        entity.setColName(cursor.getString(offset + 7));
        entity.setColId(cursor.getString(offset + 8));
        entity.setIsFav(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LiveChalObj entity, long rowId) {
        entity.setKeyL(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LiveChalObj entity) {
        if(entity != null) {
            return entity.getKeyL();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LiveChalObj entity) {
        return entity.getKeyL() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
