package com.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.datas.ProgremPlayerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGREM_PLAYER_INFO".
*/
public class ProgremPlayerInfoDao extends AbstractDao<ProgremPlayerInfo, Void> {

    public static final String TABLENAME = "PROGREM_PLAYER_INFO";

    /**
     * Properties of entity ProgremPlayerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ColName = new Property(0, String.class, "colName", false, "COL_NAME");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Position = new Property(2, int.class, "position", false, "POSITION");
    }


    public ProgremPlayerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ProgremPlayerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGREM_PLAYER_INFO\" (" + //
                "\"COL_NAME\" TEXT," + // 0: colName
                "\"URL\" TEXT NOT NULL ," + // 1: url
                "\"POSITION\" INTEGER NOT NULL );"); // 2: position
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PROGREM_PLAYER_INFO_COL_NAME ON \"PROGREM_PLAYER_INFO\"" +
                " (\"COL_NAME\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PROGREM_PLAYER_INFO_URL ON \"PROGREM_PLAYER_INFO\"" +
                " (\"URL\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGREM_PLAYER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProgremPlayerInfo entity) {
        stmt.clearBindings();
 
        String colName = entity.getColName();
        if (colName != null) {
            stmt.bindString(1, colName);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindLong(3, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProgremPlayerInfo entity) {
        stmt.clearBindings();
 
        String colName = entity.getColName();
        if (colName != null) {
            stmt.bindString(1, colName);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindLong(3, entity.getPosition());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ProgremPlayerInfo readEntity(Cursor cursor, int offset) {
        ProgremPlayerInfo entity = new ProgremPlayerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // colName
            cursor.getString(offset + 1), // url
            cursor.getInt(offset + 2) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProgremPlayerInfo entity, int offset) {
        entity.setColName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setPosition(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ProgremPlayerInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ProgremPlayerInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(ProgremPlayerInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
