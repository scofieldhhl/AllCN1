package com.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.datas.ReMovieObj;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RE_MOVIE_OBJ".
*/
public class ReMovieObjDao extends AbstractDao<ReMovieObj, Long> {

    public static final String TABLENAME = "RE_MOVIE_OBJ";

    /**
     * Properties of entity ReMovieObj.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cid = new Property(1, String.class, "cid", false, "CID");
        public final static Property Casts = new Property(2, String.class, "casts", false, "CASTS");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property Countries = new Property(4, String.class, "countries", false, "COUNTRIES");
        public final static Property Directors = new Property(5, String.class, "directors", false, "DIRECTORS");
        public final static Property Summary = new Property(6, String.class, "summary", false, "SUMMARY");
        public final static Property Year = new Property(7, String.class, "year", false, "YEAR");
        public final static Property MovieId = new Property(8, int.class, "movieId", false, "MOVIE_ID");
        public final static Property ImgUrl = new Property(9, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Name = new Property(10, String.class, "name", false, "NAME");
    }


    public ReMovieObjDao(DaoConfig config) {
        super(config);
    }
    
    public ReMovieObjDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RE_MOVIE_OBJ\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CID\" TEXT," + // 1: cid
                "\"CASTS\" TEXT," + // 2: casts
                "\"CATEGORY\" TEXT," + // 3: category
                "\"COUNTRIES\" TEXT," + // 4: countries
                "\"DIRECTORS\" TEXT," + // 5: directors
                "\"SUMMARY\" TEXT," + // 6: summary
                "\"YEAR\" TEXT," + // 7: year
                "\"MOVIE_ID\" INTEGER NOT NULL ," + // 8: movieId
                "\"IMG_URL\" TEXT," + // 9: imgUrl
                "\"NAME\" TEXT);"); // 10: name
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_RE_MOVIE_OBJ_NAME_CID_MOVIE_ID ON \"RE_MOVIE_OBJ\"" +
                " (\"NAME\" ASC,\"CID\" ASC,\"MOVIE_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RE_MOVIE_OBJ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReMovieObj entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(2, cid);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(3, casts);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(5, countries);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(6, directors);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(7, summary);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(8, year);
        }
        stmt.bindLong(9, entity.getMovieId());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(10, imgUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReMovieObj entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(2, cid);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(3, casts);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        String countries = entity.getCountries();
        if (countries != null) {
            stmt.bindString(5, countries);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(6, directors);
        }
 
        String summary = entity.getSummary();
        if (summary != null) {
            stmt.bindString(7, summary);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(8, year);
        }
        stmt.bindLong(9, entity.getMovieId());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(10, imgUrl);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(11, name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReMovieObj readEntity(Cursor cursor, int offset) {
        ReMovieObj entity = new ReMovieObj( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // casts
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // countries
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // directors
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // summary
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // year
            cursor.getInt(offset + 8), // movieId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imgUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReMovieObj entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCasts(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCountries(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDirectors(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSummary(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYear(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMovieId(cursor.getInt(offset + 8));
        entity.setImgUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReMovieObj entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReMovieObj entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReMovieObj entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
